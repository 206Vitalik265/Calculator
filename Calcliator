//Sort.h
//Header file
#pragma once
#include <stdlib.h>
#include <string.h>
#include <tchar.h>
struct Member
{
	char symb;
	int nuber;
	bool triger;
};
struct Ret {
	Member mainCont[50];
	int countelem;
	bool error;
};
struct Retrozrah
{
	int znach;
	bool error = false;
};
Ret Sortcalc(char*str);
Retrozrah Rozcala(Ret chang);
_____________________________________________________________________________________________
//Sort.cpp
//Cpp file
#include"Sort.h"
Ret Sortcalc(char*str)
{
	Ret mainRet;
	//тригер для цифр і символів + -
	if ((str[0] < 48 || str[0] > 57) && (str[0] != 43) && (str[0] != 45)) {
		mainRet.error = true;
		return mainRet;
	}
	//логіка сортування
	char conteinerchar[10];
	Member mainConteiner[50];
	int coutmainCont = 0;
	for (int i = 0, a = 0; i < strlen(str) + 1; i++)
	{
		if (str[i] >= 48 && str[i] <= 57)
		{
			for (int g = 0, j = i; j < strlen(str) + 1; j++, g++, i++) {
				if (str[j] >= 48 && str[j] <= 57)
					conteinerchar[g] = str[i];
				else
					break;
			}
			mainConteiner[a].nuber = atoi(conteinerchar);
			memset(conteinerchar, '\0', 10);
			mainConteiner[a].triger = true;
			a++;
			coutmainCont++;
			i--;
		}
		else
		{
			mainConteiner[a].symb = str[i];
			mainConteiner[a].triger = false;
			a++;
			coutmainCont++;
		}
	}
	//тригер на символи підряд
	for (int i = 0; i < coutmainCont; i++) {
		if ((mainConteiner[i].triger == false) && (mainConteiner[i + 1].triger == false)) {
			mainRet.error = true;
			return mainRet;
		}
	}
	mainRet.error = false;
	for (int i = 0; i < coutmainCont; i++)
		mainRet.mainCont[i] = mainConteiner[i];
	mainRet.countelem = coutmainCont;
	return mainRet;
}
Retrozrah Rozcala(Ret chang) {
	//обрахунок
	Member mainConteiner[50];
	int coutmainCont = chang.countelem;
	Retrozrah znach;
	for (int i = 0; i < coutmainCont; i++)
		mainConteiner[i] = chang.mainCont[i];
	int tr = 0;
	int rozrah;
	int tymzmin;
	if (coutmainCont == 2)
		rozrah = mainConteiner[0].nuber;
	for (int i = 0; i < coutmainCont - 2; ) {
		if ((mainConteiner[0].triger == false) && (mainConteiner[0].symb == '-') && (tr == 0)) {
			rozrah = mainConteiner[1].nuber *(-1);
			tr++;
			i++;
			continue;
		}
		if ((mainConteiner[0].triger == false) && (mainConteiner[0].symb == '+') && (tr == 0)) {
			rozrah = mainConteiner[1].nuber;
			tr++;
			i++;
			continue;
		}
		if (tr == 0) {
			rozrah = mainConteiner[0].nuber;
			tr++;
		}
		if ((mainConteiner[i].triger == true) && (mainConteiner[i + 1].triger == false)) {
			switch (mainConteiner[i + 1].symb)
			{
			case '*':
				rozrah = rozrah*mainConteiner[i + 2].nuber;
				i = i + 2;
				break;
			case '/':
				if (mainConteiner[i + 2].nuber != 0) {
					rozrah = rozrah / mainConteiner[i + 2].nuber;
					i = i + 2;
				}
				else {
					znach.error = true;
					return znach;
				}
				break;
			case '+':
				tymzmin = 0;
				if ((mainConteiner[i + 3].symb == '+') && (mainConteiner[i + 3].symb == '-')) {
					rozrah = rozrah + mainConteiner[i + 2].nuber;
					i = i + 2;
				}
				else {
					int j;
					tymzmin = mainConteiner[i + 2].nuber;
					for (j = i + 2; j < coutmainCont - 2;) {
						if (mainConteiner[j + 1].symb == '*')
						{
							tymzmin = tymzmin*mainConteiner[j + 2].nuber;
							j = j + 2;
						}
						if (mainConteiner[j + 1].symb == '/')
						{
							if (mainConteiner[j + 2].nuber != 0) {
								tymzmin = tymzmin / mainConteiner[j + 2].nuber;
								j = j + 2;
							}
							else {
								znach.error = true;
								return znach;
							}
						}
						if ((mainConteiner[j + 1].symb == '+') || (mainConteiner[j + 1].symb == '-'))
							break;
					}
					rozrah = rozrah + tymzmin;
					i = j;
				}
				break;
			case '-':
				tymzmin = 0;
				if ((mainConteiner[i + 3].symb == '+') && (mainConteiner[i + 3].symb == '-')) {
					rozrah = rozrah + mainConteiner[i + 2].nuber;
					i = i + 2;
				}
				else {
					int j;
					tymzmin = mainConteiner[i + 2].nuber;
					for (j = i + 2; j < coutmainCont - 2;) {
						if (mainConteiner[j + 1].symb == '*')
						{
							tymzmin = tymzmin*mainConteiner[j + 2].nuber;
							j = j + 2;
						}
						if (mainConteiner[j + 1].symb == '/')
						{
							if (mainConteiner[j + 2].nuber != 0) {
								tymzmin = tymzmin / mainConteiner[j + 2].nuber;
								j = j + 2;
							}
							else {
								znach.error = true;
								return znach;
							}
						}
						if ((mainConteiner[j + 1].symb == '+') || (mainConteiner[j + 1].symb == '-'))
							break;
					}
					rozrah = rozrah - tymzmin;
					i = j;
				}
				break;
			}
		}
	}
	znach.znach = rozrah;
	return znach;
}
____________________________________________________________________________________________________________________________
//main.cpp
//Cpp file
#include <windows.h>
#include <stdlib.h>
#include <string.h>
#include <tchar.h>
#include "Sort.h"
// Global variables
// The main window class name.
static TCHAR szWindowClass[] = _T("CalculatorDesk");
// The string that appears in the application's title bar.
static TCHAR szTitle[] = _T("Calculator");
HINSTANCE hInst;
// Forward declarations of functions included in this code module:
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//fnc winMain
int CALLBACK WinMain(
	_In_ HINSTANCE hInstance,
	_In_opt_ HINSTANCE hPrevInstance,
	_In_ LPSTR     lpCmdLine,
	_In_ int       nCmdShow
)
{
	WNDCLASSEX wcex;
	wcex.cbSize = sizeof(WNDCLASSEX);
	wcex.style = CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc = WndProc;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hInstance = hInstance;
	wcex.hIcon = LoadIcon(hInstance, IDI_APPLICATION);
	wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 3);
	wcex.lpszMenuName = NULL;
	wcex.lpszClassName = szWindowClass;
	wcex.hIconSm = LoadIcon(wcex.hInstance, IDI_APPLICATION);
	if (!RegisterClassEx(&wcex))
	{
		MessageBox(NULL,
			_T("Call to RegisterClassEx failed!"),
			_T("Windows Desktop Guided Tour"),
			NULL);
		return 1;
	}
	// Store instance handle in our global variable
	hInst = hInstance;
	// The parameters to CreateWindow explained:
	// szWindowClass: the name of the application
	// szTitle: the text that appears in the title bar
	// WS_OVERLAPPEDWINDOW: the type of window to create
	// CW_USEDEFAULT, CW_USEDEFAULT: initial position (x, y)
	// 500, 100: initial size (width, length)
	// NULL: the parent of this window
	// NULL: this application does not have a menu bar
	// hInstance: the first parameter from WinMain
	// NULL: not used in this application
	HWND hWnd = CreateWindow(
		szWindowClass,
		szTitle,
		WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT,
		200, 200,
		NULL,
		NULL,
		hInstance,
		NULL
	);
	if (!hWnd)
	{
		MessageBox(NULL,
			_T("Call to CreateWindow failed!"),
			_T("Windows Desktop Guided Tour"),
			NULL);
		return 1;
	}
	// The parameters to ShowWindow explained:
	// hWnd: the value returned from CreateWindow
	// nCmdShow: the fourth parameter from WinMain
	ShowWindow(hWnd,
		nCmdShow);
	UpdateWindow(hWnd);

	// Main message loop:
	MSG msg;
	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return (int)msg.wParam;
}
//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE:  Processes messages for the main window.
//
//  WM_PAINT    - Paint the main window
//  WM_DESTROY  - post a quit message and return
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	static HWND hButton[3][6];
	static wchar_t st1[100];
	wchar_t id[20] = { L"BUTTON_ID" };
	wchar_t s[10];
	wchar_t sym[6] = { '+','-','*','/','C','=' };
	int countcuv = 1;
	int countchar = 0;
	int countchar1 = 10;
	switch (message)
	{
	case WM_CREATE:
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 5; j++)
			{
				if (j < 3)
				{
					wsprintf(s, L"%d", countcuv);
					hButton[i][j] = CreateWindow(L"button", s,
						WS_CHILD | WS_VISIBLE | BS_DEFPUSHBUTTON,
						5 + j * 35, 25 + i * 35,
						35, 35,
						hWnd, (HMENU)(1000 + countcuv),
						hInst, NULL);
					countcuv++;
				}
				else {			
					s[0] = sym[countchar];
					hButton[i][j] = CreateWindow(L"button", s,
						WS_CHILD | WS_VISIBLE | BS_DEFPUSHBUTTON,
						5 + j * 35, 25 + i * 35,
						35, 35,
						hWnd, (HMENU)(1000 + countchar1),
						hInst, NULL);
					countchar1++;
					countchar++;
				  }
				}
		}
		hButton[3][16] = CreateWindow(L"button", L"0",
			WS_CHILD | WS_VISIBLE | BS_DEFPUSHBUTTON,
			5, 130,
			175, 35,
			hWnd, (HMENU)1016,
			hInst, NULL);
		CreateWindowEx(NULL, L"Edit", L"0", WS_VISIBLE | WS_CHILD, 5, 5, 175, 20, hWnd, NULL, hInst, NULL);
		break;

	case WM_COMMAND:
			if ((LOWORD(wParam) >=1000)&&(LOWORD(wParam)<1010)) {
				for (int i = 0; i < 16; i++){
						if (LOWORD(wParam) == (1000 + i)){
								wsprintf(s, L"%d", i);
								lstrcatW(st1, s);
								SetDlgItemText(hWnd, 0, st1);
								break;
						}
			    }
		    }
			if ((LOWORD(wParam) >= 1010) && (LOWORD(wParam)<1017)) {
				int g = 0;
				size_t charsConverted = 0;
				char str21[100];
				Retrozrah fina;
				Ret change;
				wchar_t onlyzer[50] = { L"0" };
				bool triger = false;
				switch (LOWORD(wParam))
				{
				case 1010: 
					lstrcatW(st1, L"+");
					break;
				case 1011:
					lstrcatW(st1, L"-");
					break;
				case 1012:
					lstrcatW(st1, L"*");
					break;
				case 1013:
					lstrcatW(st1, L"/");
					break;
				case 1014:
					triger = true;
					lstrcpyW(onlyzer, L"0");
					break;
				case 1015:
					if (lstrlenW(st1) == 0)
					{
					}
					else{
						for (int i = 0; i < 100; i++)
							str21[i] = (char)st1[i];
						change = Sortcalc(str21);
						if (change.error == false)
						{
							fina = Rozcala(change);
							if (fina.error == false) {
								triger = true;
								wsprintf(onlyzer, L"%d", fina.znach);
							}
							else {
								triger = true;
								MessageBox(NULL,
									_T("Please try again"),
									_T("Error"),
									NULL);
							}
						}
						else
						{
							triger = true;
							MessageBox(NULL,
								_T("Please try again"),
								_T("Error"),
								NULL);
						}
					}
					break;
				case 1016:
					lstrcatW(st1, L"0");
					break;
				default:
					break;
				}
				if (lstrlenW(st1) == 0&&triger==false)
				{
				}
				else {

					if (triger == true) {
						SetDlgItemText(hWnd, 0, onlyzer);
						triger = false;
						lstrcpyW(st1, L"");
						lstrcpyW(onlyzer, L"0");
					}
					else
						SetDlgItemText(hWnd, 0, st1);
				}
			}

	return 0;

	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
		break;
	}
}


